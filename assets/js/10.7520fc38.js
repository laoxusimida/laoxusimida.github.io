(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{485:function(t,a,s){"use strict";s.r(a);var e=s(58),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"钩子函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数"}},[t._v("#")]),t._v(" 钩子函数")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.png",alt:"生命周期11个钩子函数"}})]),t._v(" "),s("h3",{attrs:{id:"keep-alive的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive的使用"}},[t._v("#")]),t._v(" keep-alive的使用")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/keep-alive%E7%9A%84%E4%BD%BF%E7%94%A8.png",alt:"keep-alive是暂存组件不被销毁从而提高性能的方法"}})]),t._v(" "),s("h3",{attrs:{id:"cookie与token的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie与token的区别"}},[t._v("#")]),t._v(" cookie与token的区别")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/token.jpg",alt:"token请求"}}),t._v(" "),s("img",{attrs:{src:"/img/cookie.png",alt:"cookie请求"}})]),t._v(" "),s("h3",{attrs:{id:"搭建vue脚手架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搭建vue脚手架"}},[t._v("#")]),t._v(" 搭建Vue脚手架")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%90%AD%E5%BB%BAVue%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6.jpg",alt:"脚手架"}})]),t._v(" "),s("h3",{attrs:{id:"将id作为属性名对应不同的属性值，多应用与相同样式不同属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将id作为属性名对应不同的属性值，多应用与相同样式不同属性"}},[t._v("#")]),t._v(" 将id作为属性名对应不同的属性值，多应用与相同样式不同属性")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/shuxing.jpg",alt:"token请求"}})]),t._v(" "),s("h3",{attrs:{id:"row上边线问题根据条件判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#row上边线问题根据条件判断"}},[t._v("#")]),t._v(" row上边线问题根据条件判断")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/row%E4%B8%8A%E8%BE%B9%E7%BA%BF.png",alt:"row上边线"}})]),t._v(" "),s("h3",{attrs:{id:"运用json深克隆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运用json深克隆"}},[t._v("#")]),t._v(" 运用Json深克隆")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B7%B1%E5%85%8B%E9%9A%861.png",alt:"深克隆"}})]),t._v(" "),s("h3",{attrs:{id:"时间处理格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间处理格式"}},[t._v("#")]),t._v(" 时间处理格式")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%A0%BC%E5%BC%8F.png",alt:"时间"}})]),t._v(" "),s("h3",{attrs:{id:"组件中使用v-model-v-bind-attrs-v-on-input的基本原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件中使用v-model-v-bind-attrs-v-on-input的基本原理"}},[t._v("#")]),t._v(" 组件中使用v-model=v-bind=$attrs+v-on:input的基本原理")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/v-model.png",alt:"v-model在组件的使用"}})]),t._v(" "),s("h3",{attrs:{id:"组件中使用v-model的基本原理-v-bind-attrs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件中使用v-model的基本原理-v-bind-attrs"}},[t._v("#")]),t._v(" 组件中使用v-model的基本原理--v-bind=$attrs")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E5%AD%90%E7%BB%84%E4%BB%B6%E6%8E%A5%E6%94%B6%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E7%9A%84%E5%80%BC.png",alt:"v-model在组件的使用"}})]),t._v(" "),s("h3",{attrs:{id:"组件中使用v-model的基本原理-v-on-input"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件中使用v-model的基本原理-v-on-input"}},[t._v("#")]),t._v(" 组件中使用v-model的基本原理--v-on:input")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%91%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E4%BA%8B%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE.png",alt:"v-model在组件的使用"}})]),t._v(" "),s("h3",{attrs:{id:"自定义v-model配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义v-model配置"}},[t._v("#")]),t._v(" 自定义v-model配置")]),t._v(" "),s("p",[t._v("使用model对组件进行配置model有prop和event构成input输入框是\nprop:value event: input 可以更改比如checkbox prop:checked event:change\nprops对value进行数据上的配置要求，对change要求类型以及默认值\n"),s("img",{attrs:{src:"/img/v-model%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.png",alt:"v-model的自定义配置"}})]),t._v(" "),s("h3",{attrs:{id:"注册ui库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注册ui库"}},[t._v("#")]),t._v(" 注册ui库")]),t._v(" "),s("h1",{attrs:{id:"myui"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#myui"}},[t._v("#")]),t._v(" myui")]),t._v(" "),s("h2",{attrs:{id:"封装-button"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装-button"}},[t._v("#")]),t._v(" 封装 button")]),t._v(" "),s("h3",{attrs:{id:"初步封装-button-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初步封装-button-组件"}},[t._v("#")]),t._v(" 初步封装 button 组件")]),t._v(" "),s("ol",[s("li",[t._v("在 components 目录中创建一个 Button.vue 组件")]),t._v(" "),s("li",[t._v("在 main.js 中引入注册为全局组件"),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入Button组件并且注册为全局组件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Button "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./components/Button.vue'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册为全局组件")]),t._v("\nVue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kl-button'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Button"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"使用插件来封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用插件来封装"}},[t._v("#")]),t._v(" 使用插件来封装")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 components 目录中定义插件 js 的配置项")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入vue组件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入Button组件并且注册为全局组件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Button "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./Button.vue'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义install方法为了定义插件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断插件是否安装等等 这里省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册为全局组件")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Vue.component('kl-button', Button)")]),t._v("\n  Vue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Button"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Button"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  install\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在 main.js 中通过 Vue.use 注册一个 ui 插件")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入自己的ui库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" KLui "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./components/index.js'")]),t._v("\nVue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KLui"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用install方法")]),t._v("\n")])])]),s("ol",[s("li",[t._v("如果在node-module中打包，需要将index.js注册组件的路径更改，否则不能正常引入。\n4、注意需要给与入口文件  在script中配置\"main\":'../lib/commponent/index.js'")])])])]),t._v(" "),s("h2",{attrs:{id:"vue-cli-打包一-ui-库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli-打包一-ui-库"}},[t._v("#")]),t._v(" vue-cli 打包一 ui 库")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 package.json 的 scripts 中配置打包任务")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"build:lib": "vue-cli-service build --target lib --name klxin-ui --dest lib src/components/index.js"\n')])])])]),t._v(" "),s("li",[s("p",[t._v("解释")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --target lib 当前以UI库的方式打包 libary")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --name klxin-ui 名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --dest lib 打包输出到lib文件夹中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/components/index.js 打包的入口文件")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("执行"),s("code",[t._v("npm run build:lib")])])])]),t._v(" "),s("h2",{attrs:{id:"发布到-npm-中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发布到-npm-中"}},[t._v("#")]),t._v(" 发布到 npm 中")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("npm 注册账号")])]),t._v(" "),s("li",[s("p",[t._v("发包")]),t._v(" "),s("ul",[s("li",[t._v("第一次发布包：\n在终端输入 npm adduser，提示输入账号，密码和邮箱，然后将提示创建成功")]),t._v(" "),s("li",[t._v("非第一次发布包：\n在终端输入 npm login，然后输入你创建的账号和密码，和邮箱，登陆")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("注意")]),t._v(" npm adduser 成功的时候默认你已经登陆了，所以不需要再接着 npm login.")])])]),t._v(" "),s("h3",{attrs:{id:"keep-alive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[t._v("#")]),t._v(" keep-alive")]),t._v(" "),s("h4",{attrs:{id:"理解："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解："}},[t._v("#")]),t._v(" 理解：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("比如常见tab栏切换以及menu栏频繁切换，切换时组件都会经历一次生命周期，这样频繁切换会造成性能上巨大\n的浪费，所以使用keep-alive使得组件避免销毁缓存下来，大大提高性能。\n")])])]),s("h3",{attrs:{id:"组件通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),s("h4",{attrs:{id:"理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解"}},[t._v("#")]),t._v(" 理解:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  1、父子之间通信\n  2、非父子 事件中心（事件总线）\n  3、provide和inject （跨代传值）\n  4、$parent和$children以及$root （应急情况下使用，不推荐）\n  5、 $refs 在普通dom中指的是获取dom元素  而组件中获取的是组件的实例\n  6、 $attrs  是在父子传值时2不需要用props获取可以直接获取到$attrs  可以在子组件中打印出来\n  7、 vuex\n")])])]),s("h3",{attrs:{id:"混入的认识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#混入的认识"}},[t._v("#")]),t._v(" 混入的认识")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%B7%B7%E5%85%A5.png",alt:"混入的认识"}})]),t._v(" "),s("h4",{attrs:{id:"vue项目优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue项目优化"}},[t._v("#")]),t._v(" vue项目优化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  1、使用两个不同的打包入口文件区分生产环境production和开发环境development\n  2、使用external去忽略你所需要的项然后引用外部CDN资源\n  3、引用html插件区分生产环境和开发环境判断是否引入外部cdn\n  4、使用路由懒觉按需加载路由\n")])])]),s("h4",{attrs:{id:"反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),s("p",[t._v("如果你的前端地址和请求地址不是同一个主机时，需要在后端设置cors\n也可以在前端vue.config.js设置devServe.proxy\n需要时可以设置devServer的相关配置\n"),s("img",{attrs:{src:"/img/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png",alt:"反向代理"}})]),t._v(" "),s("h4",{attrs:{id:"vue原理数据的渲染初步认识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue原理数据的渲染初步认识"}},[t._v("#")]),t._v(" vue原理数据的渲染初步认识")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/vue%E5%8E%9F%E7%90%86.png",alt:"vue原理"}}),t._v(" "),s("img",{attrs:{src:"/img/vue%E5%8E%9F%E7%90%861.png",alt:"vue原理"}})]),t._v(" "),s("h4",{attrs:{id:"vuex与localstorage区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vuex与localstorage区别"}},[t._v("#")]),t._v(" vuex与localStorage区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  1、vuex是响应时\n  2、 localStorage是持久存储不销毁，vuex刷新即销毁\n")])])]),s("h4",{attrs:{id:"vue数据劫持原理-深度劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue数据劫持原理-深度劫持"}},[t._v("#")]),t._v(" vue数据劫持原理(深度劫持)")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%811.png",alt:"vue数据劫持"}}),t._v(" "),s("img",{attrs:{src:"/img/%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%812.png",alt:"vue数据劫持"}})]),t._v(" "),s("h3",{attrs:{id:"mvvm定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvvm定义"}},[t._v("#")]),t._v(" mvvm定义")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  mvvm顾名思义M指的是后台传递的数据而v指的是视图也就是dom，而vm是一个视图\n  和数据建立关系的桥梁，后端数据转化为视图的方式为数据绑定，视图转化为数据为事件监听，\n  作为一个观察者，当数据发生变化时会通知视图更新，当视图发生变化时会通知数据发生变化\n  从而实现数据双向绑定\n")])])]),s("h3",{attrs:{id:"vue-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-js"}},[t._v("#")]),t._v(" vue.js")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  vue是一个轻量级高性能的，易读懂的api，是一个数据驱动web界面的渐进式框架\n  结合组件形成数据与视图结构相分离的开发模式，核心是响应式的数据绑定系统。\n")])])]),s("h3",{attrs:{id:"vue的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue的特点"}},[t._v("#")]),t._v(" vue的特点")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  可结合vue的定义来说，vue特点：响应式编程，组件化\n  优点：简单易学，轻量级，视图与数据结构相分离，组件化开发，虚拟dom，双向数据绑定\n")])])]),s("h3",{attrs:{id:"为什么data是一个函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么data是一个函数"}},[t._v("#")]),t._v(" 为什么data是一个函数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  data是一个引用数据类型，每次组件被重用时若为一个对象那么他的引用地址就会发生变化，\n  如果data数据发生变化，那么引用它的组件中的视图也会随之发生变化，所以使用返回对象的\n  方法那么每次返回的对象它们的引用地址都不一样，形成一个独立的作用域。\n")])])]),s("h3",{attrs:{id:"路由导航钩子有哪些？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由导航钩子有哪些？"}},[t._v("#")]),t._v(" 路由导航钩子有哪些？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  ①、\n  1全局路由导航钩子(路由导航守卫) beforeResolve和beforeEach具有相同作用\n  router.beforeEach(to,from,next)   next必须调用否则钩子函数无法resolved\n  2后置钩子\n  router.afterEach(to,from)\n  ②单独路由的导航钩子\n  beforeEnter(to,from)\n  ③组件内的路由钩子\n  beforeRouterEnter()   渲染之前被调用\n  beforeRouterUpdata()  更新时被调用\n  beforeRouterLeave()\t导航离开组件时被调用\n")])])]),s("h3",{attrs:{id:"vm-nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vm-nexttick"}},[t._v("#")]),t._v(" vm.$nextTick()")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  在数据发生变化时vue更新视图，在数据变化之后立即执行$nextTick()方法，\n  更新视图的回调函数执行在$nextTick方法内\n")])])]),s("h3",{attrs:{id:"promise对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise对象"}},[t._v("#")]),t._v(" Promise对象")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  Promise的提出是为了解决回调地狱问题，Promise对象处理未立即返回结果的\n  函数，是以解决异步操作的api\n  Promise特点：一旦状态发生变化那么将不会再改变,如果再向里添加回调函数也立即回得到这个结果\n  Promise有3个状态pending(进行中) fullfilled(成功) rejected(失败) \n  只有pending->fullfilled和pending->rejected阶段\n  所以说Promise对象的状态不会受到外界影响，只有返回的结果才会决定状态，\n  所以说Promise只有返回了结果才知道发生在那个状态(是即将完成还是刚刚开始)\n  Promise对象有两个参数resolve(成功)和reject(失败)\n  生成实例时调用then方法可以处理resolve和reject两个状态的回调函数(必须要有)\n  catch方法可以没有，而且resolve和reject只执行一个\n")])])]),s("h3",{attrs:{id:"axios、fetch、jquery-ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#axios、fetch、jquery-ajax"}},[t._v("#")]),t._v(" axios、fetch、jquery(ajax)")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  ① juqery(ajax)\n  1、jqeury中对原生ajax进行了封装比较好，但是还是不如axios，比如\n  在使用jquery封装的ajax需要引入庞大的jquery库，所以说非常笨重，\n  2、不符合现在主流的mvvm\n  3、配置和调用时比较混乱、而且原生ajax就比较配置时就比较复杂\n\n  ② axios\n  1、axios比较优秀、支持mvvm这是尤以溪强烈推荐的，\n  优点1、基于原生XHR从浏览器上配置\n  2、拦截请求和响应\n  3、防止csrf(跨站请求伪造)\n  4、支持Promise API\n  5、并行请求(多线程)\n  6、将数据转化为json格式\n\n  ③ fetch\n  并没有基于XHR而是原生js\n  所以说不用下载第三方包但是fetch无法捕获请求错误结果，只能在\n  网络请求错误时捕获，而且不能携带cookie\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);